{"version":3,"sources":["components/Header.js","components/TwitterCards.js","components/AnimeDetails.js","components/Results.js","components/LoaderComponent.js","App.js","index.js"],"names":["Header","TwitterCards","tweets","twitter","map","item","description","text","meta","id","Card","Group","centered","fluid","items","AnimeDetails","anime","youtubeUrl","youtube","videoId","width","height","src","frameborder","allow","allowfullscreen","animeTitle","className","data","Results","props","onSubmit","handleSearch","type","placeholder","required","value","search","onChange","event","setSearch","target","state","title","LoaderComponent","loading","Loader","active","inline","App","useState","setState","isLoading","setIsLoading","fetchAnimes","query","a","fetch","method","headers","then","res","json","catch","err","console","log","preventDefault","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAUeA,MAVf,WACE,OACE,iCACE,wCACQ,iD,SCQCC,MATf,YAAoC,IAC5BC,EAD2B,EAAXC,QACCC,KAAI,SAACC,GAAD,MAAW,CACpCC,YAAaD,EAAKE,KAClBC,KAAM,YAAcH,EAAKI,OAG3B,OAAO,cAACC,EAAA,EAAKC,MAAN,CAAYC,UAAQ,EAACC,OAAK,EAACC,MAAOZ,KCkB5Ba,MAxBf,YAAkC,IAAVC,EAAS,EAATA,MAClBC,EACF,iCAAmCD,EAAME,QAAQ,GAAGT,GAAGU,QAEzD,OACE,gCACE,wBACEC,MAAM,MACNC,OAAO,MACPC,IAAKL,EACLM,YAAY,IACZC,MAAM,4BACNC,iBAAe,IAGjB,6BAAKT,EAAMU,aAEX,yBAASC,UAAU,YAAnB,SACE,cAAC,EAAD,CAAcxB,QAASa,EAAMb,QAAQyB,aClB9B,SAASC,EAAQC,GAC9B,OACE,iCACE,qBAAKH,UAAU,YAAf,SACE,sBAAMA,UAAU,aAAaI,SAAUD,EAAME,aAA7C,SACE,uBACEC,KAAK,SACLC,YAAY,yBACZC,UAAQ,EACRC,MAAON,EAAMO,OACbC,SAAU,SAACC,GAAD,OAAWT,EAAMU,UAAUD,EAAME,OAAOL,cAIxD,qBAAKT,UAAU,aAAf,SACGG,EAAMY,MAAMtC,KAAI,SAACY,GAAD,OACf,cAAC,EAAD,CAAcA,MAAOA,GAAYA,EAAM2B,e,aCLlCC,EAXS,SAAC,GACvB,OADuC,EAAdC,QAGvB,8BACE,cAACC,EAAA,EAAD,CAAQC,QAAM,EAACC,OAAO,WAAtB,uBAHiB,MC8CRC,MA7Cf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOR,EAAP,KAAcS,EAAd,KACA,EAA4BD,mBAAS,IAArC,mBAAOb,EAAP,KAAeG,EAAf,KACA,EAAkCU,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KAEMC,EAAW,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DAClBH,GAAa,GADK,SAEZI,MAAM,WAAD,OAAYF,GAAS,CAC9BG,OAAQ,MACRC,QAAS,CACP,eAAgB,qCAGjBC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACLV,EAASU,EAAIjC,MACbyB,GAAa,MAEdU,OAAM,SAACC,GACNC,QAAQC,IAAIF,EAAK,2BACjBX,GAAa,MAfC,2CAAH,sDAyBjB,OACE,sBAAK1B,UAAU,MAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,eAAf,SACE,cAACE,EAAD,CACEG,aAXa,SAACO,GACpBA,EAAM4B,iBACNF,QAAQC,IAAI7B,GACZiB,EAAYjB,IASNA,OAAQA,EACRG,UAAWA,EACXE,MAAOA,MAGX,cAAC,EAAD,CAAiBG,QAASO,QCxChCgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f9d8caa6.chunk.js","sourcesContent":["function Header() {\n  return (\n    <header>\n      <h1>\n        Recomm<strong>anime</strong>\n      </h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { Card } from \"semantic-ui-react\";\n\nfunction TwitterCards({ twitter }) {\n  const tweets = twitter.map((item) => ({\n    description: item.text,\n    meta: \"Tweets by\" + item.id,\n  }));\n\n  return <Card.Group centered fluid items={tweets} />;\n}\n\nexport default TwitterCards;\n","import React from \"react\";\nimport TwitterCards from \"./TwitterCards\";\n\nfunction AnimeDetails({ anime }) {\n  let youtubeUrl =\n    \"https://www.youtube.com/embed/\" + anime.youtube[0].id.videoId;\n\n  return (\n    <div>\n      <iframe\n        width=\"560\"\n        height=\"315\"\n        src={youtubeUrl}\n        frameborder=\"0\"\n        allow=\"autoplay; encrypted-media\"\n        allowfullscreen\n      ></iframe>\n\n      <h3>{anime.animeTitle}</h3>\n\n      <article className=\"card-body\">\n        <TwitterCards twitter={anime.twitter.data} />\n      </article>\n    </div>\n  );\n}\n\nexport default AnimeDetails;\n","import React from \"react\";\nimport AnimeDetails from \"./AnimeDetails\";\n\nexport default function Results(props) {\n  return (\n    <main>\n      <div className=\"main-head\">\n        <form className=\"search-box\" onSubmit={props.handleSearch}>\n          <input\n            type=\"search\"\n            placeholder=\"Search for an anime...\"\n            required\n            value={props.search}\n            onChange={(event) => props.setSearch(event.target.value)}\n          />\n        </form>\n      </div>\n      <div className=\"anime-list\">\n        {props.state.map((anime) => (\n          <AnimeDetails anime={anime} key={anime.title} />\n        ))}\n      </div>\n    </main>\n  );\n}\n","import React from \"react\";\nimport { Loader } from \"semantic-ui-react\";\n\nconst LoaderComponent = ({ loading }) => {\n  if (!loading) return null;\n  return (\n    <div>\n      <Loader active inline=\"centered\">\n        Loading\n      </Loader>\n    </div>\n  );\n};\n\nexport default LoaderComponent;\n","import { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Results from \"./components/Results\";\nimport LoaderComponent from \"./components/LoaderComponent\";\n\nfunction App() {\n  const [state, setState] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchAnimes = async (query) => {\n    setIsLoading(true);\n    await fetch(`/search/${query}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=UTF-8\",\n      },\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        setState(res.data);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        console.log(err, \"Server connection error\");\n        setIsLoading(false);\n      });\n  };\n\n  const handleSearch = (event) => {\n    event.preventDefault();\n    console.log(search);\n    fetchAnimes(search);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"content-wrap\">\n        <Results\n          handleSearch={handleSearch}\n          search={search}\n          setSearch={setSearch}\n          state={state}\n        />\n      </div>\n      <LoaderComponent loading={isLoading} />\n    </div>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/main.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}